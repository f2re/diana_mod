//
// "$Id$"
//
//   Header file for the GLP library, an OpenGL printing toolkit.
//
//   The GLP library is distributed under the terms of the GNU Library
//   General Public License which is described in the file "COPYING.LIB".
//   If you use this library in your program, please include a line reading
//   "OpenGL Printing Toolkit by Michael Sweet" in your version or copyright
//   output.
//
// Revision History:
//
//   $Log$
//   Revision 1.3  2006/05/09 16:35:51  ansteinf
//   removed the STANDARD_C_PLUS_PLUS ifndef option
//
//   Revision 1.2  2005/02/21 10:59:14  audunc
//   Added support for resetting state variables for multiple plots per page
//
//   Revision 1.1  2004/09/08 12:48:14  juergens
//   *** empty log message ***
//
//
//   Revision 1.3  2000/04/27  audun c
//   added a GLPstate struct for each primitive, and generic
//   support for rgb(a)-images
// 
//   Revision 1.2  1996/07/13  12:52:02  mike
//   Changed the public methods to 'virtual'.
//
//   Revision 1.1  1996/06/27  03:07:13  mike
//   Initial revision
//

#ifndef _GL_GLP_H_
#  define _GL_GLP_H_

//
// Include necessary headers.
//
// Changed to ANSI by LBS 1999-10-25

#  include <string>
#  include <map>
#  include <deque>
#  include <set>
#  include <vector>

#  include <GL/gl.h>

//
// Printing options...
//

#  define GLP_FIT_TO_PAGE	 1	// Fit the output to the page
#  define GLP_AUTO_CROP		 2	// Automatically crop to geometry
#  define GLP_GREYSCALE		 4	// Output greyscale rather than color
#  define GLP_REVERSE		 8	// Reverse grey shades
#  define GLP_DRAW_BACKGROUND	16	// Draw the background color
#  define GLP_BLACKWHITE        32      // Draw in black
#  define GLP_AUTO_ORIENT       64      // Automatic page orientation
#  define GLP_PORTRAIT         128      // Portrait
#  define GLP_LANDSCAPE        256      // Landscape

//
// OpenGL configuration options...
//

#  define GLP_RGBA		0	// RGBA mode window
#  define GLP_COLORINDEX	1	// Color index mode window

//
// Error codes...
//

#  define GLP_SUCCESS		0	// Success - no error occurred
#  define GLP_OUT_OF_MEMORY	-1	// Out of memory
#  define GLP_NO_FEEDBACK	-2	// No feedback data available
#  define GLP_ILLEGAL_OPERATION	-3	// Illegal operation of some kind

//
// Custom feedback tokens
//

#define GL_CUSTOM_TOKEN 1001
#define GL_TEXT_TOKEN   1002
#define GL_IMAGE_TOKEN  1003
#define GL_CLIP_TOKEN   1004
#define GL_RCLIP_TOKEN  1005
#define GL_RESET_TOKEN  1006

//
// Various structures used for sorting feedback data prior to printing...
//

typedef GLfloat GLPrgba[4];	// GLPrgba array structure for sanity
typedef GLfloat GLPxyz[3];	// GLPxyz array structure for sanity

struct GLPvertex	//// GLPvertex structure
{
  GLPxyz	xyz;		// Location of vertex
  GLPrgba	rgba;		// Color of vertex (alpha may be used later)
};

struct GLPimage    //// GLPimage structure
{
  unsigned char *pixels;    // pointer to data
  GLint size;      // size of image in bytes
  GLint w,h;       // width and height of complete image
  GLfloat x,y;     // glRasterPos (pixels or gl)
  GLfloat sx,sy;   // scale in x & y
  GLint ix1,iy1;   // start-pixel 
  GLint ix2,iy2;   // stop-pixel
  GLenum format;   // GL_RGB, GL_RGBA, ...
  GLenum type;     // GL_UNSIGNED_BYTE
  GLboolean blend; // GLtrue if imageblending enabled

  // clean init/destruction
  GLPimage():pixels(0),size(0),w(0),h(0){}
  ~GLPimage(){clear();}
  void clear(){if (pixels) delete[] pixels; pixels=0;}
};


// polygon stipple pattern
enum GLPstipple {
  GLPstip_none,
  GLPstip_horisontal,
  GLPstip_vertical,
  GLPstip_diagleft,
  GLPstip_diagright,
  GLPstip_diagcross,
};


struct GLPstate       //// GL state variables
{
  GLboolean  shade;   // GL_TRUE if this primitive should be shaded
  GLfloat linewidth;  // Linewidth
  GLfloat pointsize;  // Pointsize
  GLboolean linedash; // GL_TRUE if linestippling is enabled
  GLint dashpattern;  // Linedash bitmask
  GLint dashrepeat;   // Linedash repeat
  GLboolean polstiple;// Use polygon stipple pattern
  GLPstipple stippat; // polygon stipple pattern
  GLfloat stipscale;  // density of pattern
  GLubyte stipmask[128];// polygon stipple mask [128]
};

struct GLPprimitive	//// GLPprimitive structure
{
  GLPprimitive	*next,		// Next primitive in list
    *prev;		// Previous primitive in list
  int primtype;                 // Primitivetype
  GLPstate state;               // GL state variables
  GLfloat	zmin, zmax;	// Min and max depth values
  int		num_verts;	// Number of vertices used
  GLPvertex	verts[3];	// Up to 3 vertices
};

struct GLPbbox		//// GLPbbox structure
{
  GLPbbox *next,        // Next bounding box in list
    *prev;		// Previous bounding box in list
  GLPprimitive *primitives, // Primitives inside this box
    *lastprim;	   // Last primitive in this box
  GLfloat min[3],  // Minimum X, Y, Z coords
    max[3];        // Maximum X, Y, Z coords
};

struct GLPtext          //// Text
{
  std::string s;    // the actual text-string
  std::string font; // font-name
  float size;  // font-size
  float x;     // start-pos
  float y;     // ---
  float angle; // rotation-angle
};

struct GLPpoint
{
  float x;
  float y;
  float z;
};

struct GLPclippath      //// Clippath
{
  std::vector<GLPpoint> v;
  bool rectangle; // rectangle region
};

//
// The GLPcontext class provides all the basic functionality to support
// OpenGL feedback-based printing to vector/polygon printing devices or
// file formats.  For raster-only devices you are probably better off with
// an off-screen bitmap.
//

class GLPcontext	//// GLPcontext class
{
protected:
  enum {MAXIMAGES= 1000};
  int		options;	// Printing options
  GLPbbox	*bboxes;	// Primitive data
  int		feedsize;	// Feedback buffer size
  GLfloat	*feedback;	// Feedback data
  int		feedmode;	// Feedback mode (RGBA or colormap)
  int		colorsize;	// Colormap size
  GLPrgba	*colormap;	// Colorindex mapping to RGBA vals
  GLPimage images[MAXIMAGES];   // list of images
  int nimages;                  // number of defined images
  float zval;                   // artificial z-value
  GLPrgba b_rgba;               // background colour
  bool usefakestipple;          // use fake polygon stipple patterns
  GLPstipple fakepattern;       // fake polygon stipple pattern
  float stipplescale;           // scale of stippling pattern
  float linescale;              // scale of line thickness
  float pointscale;             // scale of point size
  std::map<std::string,std::string> mancom;    // manual commands
  std::string currfont;              // current font
  float  fontsize;              // current fontsize
  int textcounter;              // index to textlist
  int imagecounter;             // index to imagelist
  int clipcounter;              // index to cliplist
  std::deque<GLPtext> textlist;      // text-strings
  std::deque<std::string> customcoms;     // custom commands
  std::deque<GLPclippath> cliplist;  // clip-paths
  std::set<std::string> deffonts;         // defined fonts
  GLint	viewport[4];            // the OpenGL viewport

  void add_primitive(int primtype, GLboolean depth, GLPstate state,
		     int num_verts, GLPvertex *verts);
  void sort_primitive(GLboolean depth, GLPbbox *bbox,
		      GLPprimitive *newprim);
  int  get_vertex(GLPvertex *v, GLfloat *p);
  void delete_all();

  virtual void Reset();

public:
  virtual ~GLPcontext();

  virtual int StartPage(int mode = GLP_RGBA);
  virtual int StartPage(int mode,
			int size,
			GLPrgba *rgba);
  virtual int UpdatePage(GLboolean more);
  virtual int EndPage();

  void addReset();
  void setViewport(int x, int y, int width, int height);
  virtual void SetOptions(int print_options);
  // add image - x/y in pixel coordinates
  virtual bool AddImage(const GLvoid*,// pixels
			GLint,GLint,GLint, // size,nx,ny
			GLfloat,GLfloat,GLfloat,GLfloat, // x,y,sx,sy
			GLint,GLint,GLint,GLint,   // start,stop
			GLenum,GLenum, // format, type
			GLboolean =false);// blending
  // add image - x/y in GL coordinates
  virtual bool AddImageGl(const GLvoid*,// pixels
			  GLint,GLint,GLint, // size,nx,ny
			  GLfloat,GLfloat,GLfloat,GLfloat, // x,y,sx,sy
			  GLint,GLint,GLint,GLint,   // start,stop
			  GLenum,GLenum, // format, type
			  GLboolean =false);// blending
  // grab image from framebuffer
  virtual bool grabImage(GLint,GLint,    // x,y
			 GLint,GLint,    // nx,ny
			 GLenum,GLenum); // format, type

  void fakePolyStipple(const bool use =false) // polygon stippling method
  {usefakestipple= use;}
  void setFakePolyStipple(const GLPstipple sp)// fake polygon stipple pattern
  {fakepattern= sp;}
  void setStippleScale(const float scale =1.0)// size of stipple pattern
  {stipplescale= scale;}
  void setScales(const float lsc =0.5, const float psc =0.5)
  {linescale= lsc; pointscale= psc; }
  void setManualCommands(const std::map<std::string,std::string>& mc)
  {mancom= mc; }
  void clearManualCommands(){mancom.clear(); }
  void addCustom(const std::string);
  void setFont(std::string fn, float size);
  bool addStr(std::string s,
	      const float x, const float y,
	      const float a);
  bool addClipPath(const int& size,
		   const float* x, const float* y,
		   const bool rect = false);
  void addStencil(const int& size, const float* x, const float* y);
  void addScissor(const double x0, const double y0,
		  const double  w, const double  h);
  void addScissor(const int x0, const int y0,
		  const int  w, const int  h);

  bool removeClipping();
};

#endif // !_GL_GLP_H_

//
// End of "$Id$".
//
